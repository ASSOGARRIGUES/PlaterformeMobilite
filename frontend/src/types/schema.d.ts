/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api-schema/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description OpenApi3 schema for this API. Format can be selected via content negotiation.
         *
         *     - YAML: application/vnd.oai.openapi
         *     - JSON: application/vnd.oai.openapi+json */
        get: operations["api_schema_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/appcom/broadcast/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_appcom_broadcast_list"];
        put?: never;
        post: operations["api_appcom_broadcast_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/appcom/broadcast/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_appcom_broadcast_retrieve"];
        put: operations["api_appcom_broadcast_update"];
        post?: never;
        delete: operations["api_appcom_broadcast_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_appcom_broadcast_partial_update"];
        trace?: never;
    };
    "/api/beneficiary/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_beneficiary_list"];
        put?: never;
        post: operations["api_beneficiary_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/beneficiary/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_beneficiary_retrieve"];
        put: operations["api_beneficiary_update"];
        post?: never;
        delete: operations["api_beneficiary_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_beneficiary_partial_update"];
        trace?: never;
    };
    "/api/beneficiary/{id}/archive/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_beneficiary_archive_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["api_beneficiary_archive_partial_update"];
        trace?: never;
    };
    "/api/beneficiary/{id}/unarchive/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["api_beneficiary_unarchive_partial_update"];
        trace?: never;
    };
    "/api/beneficiary/get_archived/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_beneficiary_get_archived_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bugtracker/bug/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_bugtracker_bug_list"];
        put?: never;
        post: operations["api_bugtracker_bug_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bugtracker/bug/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_bugtracker_bug_retrieve"];
        put: operations["api_bugtracker_bug_update"];
        post?: never;
        delete: operations["api_bugtracker_bug_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_bugtracker_bug_partial_update"];
        trace?: never;
    };
    "/api/contract/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_contract_list"];
        put?: never;
        post: operations["api_contract_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contract/{contract_pk}/payment/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_contract_payment_list"];
        put?: never;
        post: operations["api_contract_payment_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contract/{contract_pk}/payment/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_contract_payment_retrieve"];
        put: operations["api_contract_payment_update"];
        post?: never;
        delete: operations["api_contract_payment_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_contract_payment_partial_update"];
        trace?: never;
    };
    "/api/contract/{contract_pk}/payment/{id}/get_participation_pdf/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_contract_payment_get_participation_pdf_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contract/{contract_pk}/payment/summary/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_contract_payment_summary_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contract/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_contract_retrieve"];
        put: operations["api_contract_update"];
        post?: never;
        delete: operations["api_contract_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_contract_partial_update"];
        trace?: never;
    };
    "/api/contract/{id}/archive/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_contract_archive_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["api_contract_archive_partial_update"];
        trace?: never;
    };
    "/api/contract/{id}/end/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_contract_end_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["api_contract_end_partial_update"];
        trace?: never;
    };
    "/api/contract/{id}/get_bill_pdf/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_contract_get_bill_pdf_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contract/{id}/get_contract_pdf/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_contract_get_contract_pdf_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contract/{id}/unarchive/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["api_contract_unarchive_partial_update"];
        trace?: never;
    };
    "/api/contract/get_archived/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_contract_get_archived_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/parking/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_parking_list"];
        put?: never;
        post: operations["api_parking_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/parking/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_parking_retrieve"];
        put: operations["api_parking_update"];
        post?: never;
        delete: operations["api_parking_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_parking_partial_update"];
        trace?: never;
    };
    "/api/referent/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_referent_list"];
        put?: never;
        post: operations["api_referent_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/referent/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_referent_retrieve"];
        put: operations["api_referent_update"];
        post?: never;
        delete: operations["api_referent_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_referent_partial_update"];
        trace?: never;
    };
    "/api/token/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a set of user credentials and returns an access and refresh JSON web
         *     token pair to prove the authentication of those credentials. */
        post: operations["api_token_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/refresh/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a refresh type JSON web token and returns an access type JSON web
         *     token if the refresh token is valid. */
        post: operations["api_token_refresh_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-actions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_user_actions_list"];
        put?: never;
        post: operations["api_user_actions_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vehicle/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_vehicle_list"];
        put?: never;
        post: operations["api_vehicle_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vehicle/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_vehicle_retrieve"];
        put: operations["api_vehicle_update"];
        post?: never;
        delete: operations["api_vehicle_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_vehicle_partial_update"];
        trace?: never;
    };
    "/api/vehicle/{id}/action_transfer/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["api_vehicle_action_transfer_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vehicle/{id}/archive/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_vehicle_archive_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["api_vehicle_archive_partial_update"];
        trace?: never;
    };
    "/api/vehicle/{id}/unarchive/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["api_vehicle_unarchive_partial_update"];
        trace?: never;
    };
    "/api/vehicle/get_all_ids/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_vehicle_get_all_ids_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vehicle/get_archived/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_vehicle_get_archived_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/whoami/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_whoami_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Action: {
            readonly id: number;
            name: string;
        };
        Beneficiary: {
            readonly id: number;
            readonly action: components["schemas"]["Action"];
            first_name: string;
            last_name: string;
            phone: string;
            address: string;
            address_complement?: string | null;
            /** Format: email */
            email: string;
            license_number?: string | null;
            /** Format: date */
            license_delivery_date?: string | null;
            city: string;
            postal_code: string;
            archived?: boolean;
        };
        /** @enum {unknown} */
        BlankEnum: BlankEnum;
        BroadcastViewed: {
            broadcast_id: number;
        };
        Bug: {
            readonly id: number;
            /** Format: uri */
            logfile?: string;
            readonly reporter: components["schemas"]["User"];
            description: string;
            reproduction_steps?: string | null;
            targeted_version: string;
            /** Format: date-time */
            readonly created_at: string;
            severity?: components["schemas"]["BugSeverityEnum"];
            type?: components["schemas"]["BugTypeEnum"];
            status?: components["schemas"]["BugStatusEnum"];
            resolve_version?: string | null;
            reporter_have_been_notified?: boolean;
        };
        /**
         * @description * `low` - Low
         *     * `medium` - Medium
         *     * `high` - High
         *     * `critical` - Critical
         * @enum {string}
         */
        BugSeverityEnum: BugSeverityEnum;
        /**
         * @description * `open` - Open
         *     * `closed` - Closed
         *     * `pending` - Pending
         * @enum {string}
         */
        BugStatusEnum: BugStatusEnum;
        /**
         * @description * `bug` - Bug
         *     * `feature` - Feature
         *     * `suggestion` - Suggestions
         * @enum {string}
         */
        BugTypeEnum: BugTypeEnum;
        Contract: {
            readonly id: number;
            start_kilometer?: number;
            readonly end_kilometer: number;
            /** Format: date-time */
            readonly created_at: string;
            readonly created_by: components["schemas"]["User"];
            referent: components["schemas"]["User"];
            readonly action: components["schemas"]["Action"];
            vehicle: components["schemas"]["Vehicle"];
            beneficiary: components["schemas"]["Beneficiary"];
            /** Format: date */
            start_date: string;
            /** Format: date */
            end_date: string;
            status?: components["schemas"]["ContractStatusEnum"];
            comment?: string | null;
            reason?: (components["schemas"]["ReasonEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Format: int64 */
            max_kilometer?: number | null;
            /** Format: int64 */
            price: number;
            /** Format: int64 */
            discount?: number;
            /** Format: int64 */
            deposit: number;
            depositPaymentMode?: components["schemas"]["PaymentModeEnum"];
            deposit_check_number?: string | null;
            /** Format: date-time */
            ended_at?: string | null;
            archived?: boolean;
        };
        ContractPaymentSummary: {
            readonly payments_sum: number;
            readonly total_due: number;
            readonly price: number;
            readonly discount: number;
            readonly nb_payments: number;
            readonly is_payed: boolean;
        };
        /**
         * @description * `waiting` - En attente d'EDL
         *     * `pending` - En cours
         *     * `over` - Clôturé
         *     * `payed` - Payé
         * @enum {string}
         */
        ContractStatusEnum: ContractStatusEnum;
        EndContract: {
            price: number;
            deposit: number;
            discount: number;
            end_kilometer: number;
            readonly start_kilometer: number;
            readonly max_kilometer: number;
            readonly vehicle_kilometer: number;
        };
        /**
         * @description * `essence` - Essence
         *     * `diesel` - Diesel
         *     * `electrique` - Electrique
         * @enum {string}
         */
        FuelTypeEnum: FuelTypeEnum;
        InAppBroadcast: {
            readonly id: number;
            title: string;
            body: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            active?: boolean;
            viewedBy?: number[];
        };
        MutationContract: {
            readonly id: number;
            start_kilometer?: number;
            readonly end_kilometer: number;
            /** Format: date-time */
            readonly created_at: string;
            readonly created_by: components["schemas"]["User"];
            referent: number;
            readonly action: components["schemas"]["Action"];
            vehicle: number;
            beneficiary: number;
            /** Format: date */
            start_date: string;
            /** Format: date */
            end_date: string;
            status?: components["schemas"]["ContractStatusEnum"];
            comment?: string | null;
            reason?: (components["schemas"]["ReasonEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Format: int64 */
            max_kilometer?: number | null;
            /** Format: int64 */
            price: number;
            /** Format: int64 */
            discount?: number;
            /** Format: int64 */
            deposit: number;
            depositPaymentMode?: components["schemas"]["PaymentModeEnum"];
            deposit_check_number?: string | null;
            /** Format: date-time */
            ended_at?: string | null;
            archived?: boolean;
        };
        MutationVehicle: {
            readonly id: number;
            /** Format: uri */
            photo?: string;
            parking?: number;
            readonly action: components["schemas"]["Action"];
            type?: components["schemas"]["VehicleTypeEnum"];
            transmission?: components["schemas"]["TransmissionEnum"];
            fuel_type?: components["schemas"]["FuelTypeEnum"];
            brand: string;
            modele: string;
            color?: string | null;
            /** Format: int64 */
            year: number;
            imat: string;
            /** Format: int64 */
            fleet_id: number;
            /** Format: int64 */
            kilometer: number;
            status?: components["schemas"]["VehicleStatusEnum"];
            /** Format: date-time */
            readonly created_at: string;
            archived?: boolean;
        };
        /** @enum {unknown} */
        NullEnum: null;
        PaginatedBeneficiaryList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["Beneficiary"][];
        };
        PaginatedBugList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["Bug"][];
        };
        PaginatedContractList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["Contract"][];
        };
        PaginatedInAppBroadcastList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["InAppBroadcast"][];
        };
        PaginatedParkingList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["Parking"][];
        };
        PaginatedPaymentList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["Payment"][];
        };
        PaginatedUserList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["User"][];
        };
        PaginatedVehicleList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["Vehicle"][];
        };
        Parking: {
            readonly id: number;
            name: string;
            actions?: number[];
        };
        PatchedBeneficiary: {
            readonly id?: number;
            readonly action?: components["schemas"]["Action"];
            first_name?: string;
            last_name?: string;
            phone?: string;
            address?: string;
            address_complement?: string | null;
            /** Format: email */
            email?: string;
            license_number?: string | null;
            /** Format: date */
            license_delivery_date?: string | null;
            city?: string;
            postal_code?: string;
            archived?: boolean;
        };
        PatchedBroadcastViewed: {
            broadcast_id?: number;
        };
        PatchedBug: {
            readonly id?: number;
            /** Format: uri */
            logfile?: string;
            readonly reporter?: components["schemas"]["User"];
            description?: string;
            reproduction_steps?: string | null;
            targeted_version?: string;
            /** Format: date-time */
            readonly created_at?: string;
            severity?: components["schemas"]["BugSeverityEnum"];
            type?: components["schemas"]["BugTypeEnum"];
            status?: components["schemas"]["BugStatusEnum"];
            resolve_version?: string | null;
            reporter_have_been_notified?: boolean;
        };
        PatchedContract: {
            readonly id?: number;
            start_kilometer?: number;
            readonly end_kilometer?: number;
            /** Format: date-time */
            readonly created_at?: string;
            readonly created_by?: components["schemas"]["User"];
            referent?: components["schemas"]["User"];
            readonly action?: components["schemas"]["Action"];
            vehicle?: components["schemas"]["Vehicle"];
            beneficiary?: components["schemas"]["Beneficiary"];
            /** Format: date */
            start_date?: string;
            /** Format: date */
            end_date?: string;
            status?: components["schemas"]["ContractStatusEnum"];
            comment?: string | null;
            reason?: (components["schemas"]["ReasonEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Format: int64 */
            max_kilometer?: number | null;
            /** Format: int64 */
            price?: number;
            /** Format: int64 */
            discount?: number;
            /** Format: int64 */
            deposit?: number;
            depositPaymentMode?: components["schemas"]["PaymentModeEnum"];
            deposit_check_number?: string | null;
            /** Format: date-time */
            ended_at?: string | null;
            archived?: boolean;
        };
        PatchedEndContract: {
            price?: number;
            deposit?: number;
            discount?: number;
            end_kilometer?: number;
            readonly start_kilometer?: number;
            readonly max_kilometer?: number;
            readonly vehicle_kilometer?: number;
        };
        PatchedMutationContract: {
            readonly id?: number;
            start_kilometer?: number;
            readonly end_kilometer?: number;
            /** Format: date-time */
            readonly created_at?: string;
            readonly created_by?: components["schemas"]["User"];
            referent?: number;
            readonly action?: components["schemas"]["Action"];
            vehicle?: number;
            beneficiary?: number;
            /** Format: date */
            start_date?: string;
            /** Format: date */
            end_date?: string;
            status?: components["schemas"]["ContractStatusEnum"];
            comment?: string | null;
            reason?: (components["schemas"]["ReasonEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /** Format: int64 */
            max_kilometer?: number | null;
            /** Format: int64 */
            price?: number;
            /** Format: int64 */
            discount?: number;
            /** Format: int64 */
            deposit?: number;
            depositPaymentMode?: components["schemas"]["PaymentModeEnum"];
            deposit_check_number?: string | null;
            /** Format: date-time */
            ended_at?: string | null;
            archived?: boolean;
        };
        PatchedMutationVehicle: {
            readonly id?: number;
            /** Format: uri */
            photo?: string;
            parking?: number;
            readonly action?: components["schemas"]["Action"];
            type?: components["schemas"]["VehicleTypeEnum"];
            transmission?: components["schemas"]["TransmissionEnum"];
            fuel_type?: components["schemas"]["FuelTypeEnum"];
            brand?: string;
            modele?: string;
            color?: string | null;
            /** Format: int64 */
            year?: number;
            imat?: string;
            /** Format: int64 */
            fleet_id?: number;
            /** Format: int64 */
            kilometer?: number;
            status?: components["schemas"]["VehicleStatusEnum"];
            /** Format: date-time */
            readonly created_at?: string;
            archived?: boolean;
        };
        PatchedParking: {
            readonly id?: number;
            name?: string;
            actions?: number[];
        };
        PatchedPayment: {
            readonly id?: number;
            /** Format: date-time */
            readonly created_at?: string;
            readonly created_by?: components["schemas"]["User"];
            readonly editable?: boolean;
            /** Format: int64 */
            amount?: number;
            mode?: components["schemas"]["PaymentModeEnum"];
            check_number?: string | null;
            /** Format: date-time */
            readonly edited_at?: string;
        };
        PatchedUser: {
            readonly id?: number;
            /**
             * Nom d’utilisateur
             * @description Requis. 150 caractères maximum. Uniquement des lettres, nombres et les caractères « @ », « . », « + », « - » et « _ ».
             */
            username?: string;
            /**
             * Adresse électronique
             * Format: email
             */
            email?: string;
            /** Prénom */
            first_name?: string;
            /** Nom */
            last_name?: string;
        };
        PatchedVehicle: {
            readonly id?: number;
            /** Format: uri */
            photo?: string;
            readonly parking?: components["schemas"]["Parking"];
            readonly action?: components["schemas"]["Action"];
            type?: components["schemas"]["VehicleTypeEnum"];
            transmission?: components["schemas"]["TransmissionEnum"];
            fuel_type?: components["schemas"]["FuelTypeEnum"];
            brand?: string;
            modele?: string;
            color?: string | null;
            /** Format: int64 */
            year?: number;
            imat?: string;
            /** Format: int64 */
            fleet_id?: number;
            /** Format: int64 */
            kilometer?: number;
            status?: components["schemas"]["VehicleStatusEnum"];
            /** Format: date-time */
            readonly created_at?: string;
            archived?: boolean;
        };
        Payment: {
            readonly id: number;
            /** Format: date-time */
            readonly created_at: string;
            readonly created_by: components["schemas"]["User"];
            readonly editable: boolean;
            /** Format: int64 */
            amount: number;
            mode: components["schemas"]["PaymentModeEnum"];
            check_number?: string | null;
            /** Format: date-time */
            readonly edited_at: string;
        };
        /**
         * @description * `cash` - Cash
         *     * `check` - Check
         *     * `card` - Card
         * @enum {string}
         */
        PaymentModeEnum: PaymentModeEnum;
        /**
         * @description * `cdd` - CDD
         *     * `cdi` - CDI
         *     * `formation` - Formation
         *     * `interim` - Intérim
         *     * `aided_contract` - Contrat aidé
         *     * `job_seeking` - Recherche d’emploi
         *     * `part_time` - Alternance
         * @enum {string}
         */
        ReasonEnum: ReasonEnum;
        ShortVehicle: {
            readonly id: number;
            /** Format: int64 */
            fleet_id: number;
            readonly action: components["schemas"]["Action"];
        };
        TokenObtainPair: {
            email: string;
            password: string;
            readonly access: string;
            readonly refresh: string;
        };
        TokenRefresh: {
            readonly access: string;
            refresh: string;
        };
        /**
         * @description * `manuelle` - Manuelle
         *     * `automatique` - Automatique
         * @enum {string}
         */
        TransmissionEnum: TransmissionEnum;
        User: {
            readonly id: number;
            /**
             * Nom d’utilisateur
             * @description Requis. 150 caractères maximum. Uniquement des lettres, nombres et les caractères « @ », « . », « + », « - » et « _ ».
             */
            username: string;
            /**
             * Adresse électronique
             * Format: email
             */
            email: string;
            /** Prénom */
            first_name?: string;
            /** Nom */
            last_name?: string;
        };
        UserAction: {
            readonly actions: components["schemas"]["Action"][];
            current_action: components["schemas"]["Action"];
        };
        UserActionUpdate: {
            current_action?: number;
        };
        Vehicle: {
            readonly id: number;
            /** Format: uri */
            photo?: string;
            readonly parking: components["schemas"]["Parking"];
            readonly action: components["schemas"]["Action"];
            type?: components["schemas"]["VehicleTypeEnum"];
            transmission?: components["schemas"]["TransmissionEnum"];
            fuel_type?: components["schemas"]["FuelTypeEnum"];
            brand: string;
            modele: string;
            color?: string | null;
            /** Format: int64 */
            year: number;
            imat: string;
            /** Format: int64 */
            fleet_id: number;
            /** Format: int64 */
            kilometer: number;
            status?: components["schemas"]["VehicleStatusEnum"];
            /** Format: date-time */
            readonly created_at: string;
            archived?: boolean;
        };
        VehicleActionTransfer: {
            parking?: number;
            action: number;
        };
        /**
         * @description * `available` - Disponible
         *     * `rented` - A dispo
         *     * `maintenance` - En maintenance
         * @enum {string}
         */
        VehicleStatusEnum: VehicleStatusEnum;
        /**
         * @description * `voiture` - Voiture
         *     * `scouter` - Scooter
         * @enum {string}
         */
        VehicleTypeEnum: VehicleTypeEnum;
        WhoAmI: {
            readonly id: number;
            /**
             * Nom d’utilisateur
             * @description Requis. 150 caractères maximum. Uniquement des lettres, nombres et les caractères « @ », « . », « + », « - » et « _ ».
             */
            username: string;
            /**
             * Adresse électronique
             * Format: email
             */
            email: string;
            /** Prénom */
            first_name?: string;
            /** Nom */
            last_name?: string;
            /**
             * Statut super-utilisateur
             * @description Précise que l’utilisateur possède toutes les permissions sans les assigner explicitement.
             */
            is_superuser?: boolean;
            readonly permissions: unknown[];
            actions?: number[];
            current_action?: number | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    api_schema_retrieve: {
        parameters: {
            query?: {
                format?: PathsApiSchemaGetParametersQueryFormat;
                lang?: PathsApiSchemaGetParametersQueryLang;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.oai.openapi": {
                        [key: string]: unknown;
                    };
                    "application/yaml": {
                        [key: string]: unknown;
                    };
                    "application/vnd.oai.openapi+json": {
                        [key: string]: unknown;
                    };
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    api_appcom_broadcast_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedInAppBroadcastList"];
                };
            };
        };
    };
    api_appcom_broadcast_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BroadcastViewed"];
                "application/x-www-form-urlencoded": components["schemas"]["BroadcastViewed"];
                "multipart/form-data": components["schemas"]["BroadcastViewed"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BroadcastViewed"];
                };
            };
        };
    };
    api_appcom_broadcast_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this in app broadcast. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BroadcastViewed"];
                };
            };
        };
    };
    api_appcom_broadcast_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this in app broadcast. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BroadcastViewed"];
                "application/x-www-form-urlencoded": components["schemas"]["BroadcastViewed"];
                "multipart/form-data": components["schemas"]["BroadcastViewed"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BroadcastViewed"];
                };
            };
        };
    };
    api_appcom_broadcast_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this in app broadcast. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_appcom_broadcast_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this in app broadcast. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedBroadcastViewed"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedBroadcastViewed"];
                "multipart/form-data": components["schemas"]["PatchedBroadcastViewed"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BroadcastViewed"];
                };
            };
        };
    };
    api_beneficiary_list: {
        parameters: {
            query?: {
                address?: string;
                /** @description Les valeurs multiples doivent être séparées par des virgules. */
                address__in?: string[];
                city?: string;
                /** @description Les valeurs multiples doivent être séparées par des virgules. */
                city__in?: string[];
                email?: string;
                /** @description Les valeurs multiples doivent être séparées par des virgules. */
                email__in?: string[];
                first_name?: string;
                /** @description Les valeurs multiples doivent être séparées par des virgules. */
                first_name__in?: string[];
                id?: number;
                /** @description Les valeurs multiples doivent être séparées par des virgules. */
                id__in?: number[];
                last_name?: string;
                /** @description Les valeurs multiples doivent être séparées par des virgules. */
                last_name__in?: string[];
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                phone?: string;
                /** @description Les valeurs multiples doivent être séparées par des virgules. */
                phone__in?: string[];
                postal_code?: string;
                /** @description Les valeurs multiples doivent être séparées par des virgules. */
                postal_code__in?: string[];
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedBeneficiaryList"];
                };
            };
        };
    };
    api_beneficiary_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Beneficiary"];
                "application/x-www-form-urlencoded": components["schemas"]["Beneficiary"];
                "multipart/form-data": components["schemas"]["Beneficiary"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Beneficiary"];
                };
            };
        };
    };
    api_beneficiary_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this beneficiary. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Beneficiary"];
                };
            };
        };
    };
    api_beneficiary_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this beneficiary. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Beneficiary"];
                "application/x-www-form-urlencoded": components["schemas"]["Beneficiary"];
                "multipart/form-data": components["schemas"]["Beneficiary"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Beneficiary"];
                };
            };
        };
    };
    api_beneficiary_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this beneficiary. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_beneficiary_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this beneficiary. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedBeneficiary"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedBeneficiary"];
                "multipart/form-data": components["schemas"]["PatchedBeneficiary"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Beneficiary"];
                };
            };
        };
    };
    api_beneficiary_archive_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this beneficiary. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Beneficiary"];
                };
            };
        };
    };
    api_beneficiary_archive_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this beneficiary. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedBeneficiary"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedBeneficiary"];
                "multipart/form-data": components["schemas"]["PatchedBeneficiary"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Beneficiary"];
                };
            };
        };
    };
    api_beneficiary_unarchive_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this beneficiary. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedBeneficiary"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedBeneficiary"];
                "multipart/form-data": components["schemas"]["PatchedBeneficiary"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Beneficiary"];
                };
            };
        };
    };
    api_beneficiary_get_archived_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Beneficiary"];
                };
            };
        };
    };
    api_bugtracker_bug_list: {
        parameters: {
            query?: {
                id?: number;
                /** @description Les valeurs multiples doivent être séparées par des virgules. */
                id__in?: number[];
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                resolve_version?: string;
                /** @description Les valeurs multiples doivent être séparées par des virgules. */
                resolve_version__in?: string[];
                /** @description A search term. */
                search?: string;
                /** @description * `low` - Low
                 *     * `medium` - Medium
                 *     * `high` - High
                 *     * `critical` - Critical */
                severity?: PathsApiBugtrackerBugGetParametersQuerySeverity;
                /** @description Les valeurs multiples doivent être séparées par des virgules. */
                severity__in?: string[];
                /** @description * `open` - Open
                 *     * `closed` - Closed
                 *     * `pending` - Pending */
                status?: PathsApiBugtrackerBugGetParametersQueryStatus;
                /** @description Les valeurs multiples doivent être séparées par des virgules. */
                status__in?: string[];
                targeted_version?: string;
                /** @description Les valeurs multiples doivent être séparées par des virgules. */
                targeted_version__in?: string[];
                /** @description * `bug` - Bug
                 *     * `feature` - Feature
                 *     * `suggestion` - Suggestions */
                type?: PathsApiBugtrackerBugGetParametersQueryType;
                /** @description Les valeurs multiples doivent être séparées par des virgules. */
                type__in?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedBugList"];
                };
            };
        };
    };
    api_bugtracker_bug_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Bug"];
                "application/x-www-form-urlencoded": components["schemas"]["Bug"];
                "multipart/form-data": components["schemas"]["Bug"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Bug"];
                };
            };
        };
    };
    api_bugtracker_bug_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this bug. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Bug"];
                };
            };
        };
    };
    api_bugtracker_bug_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this bug. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Bug"];
                "application/x-www-form-urlencoded": components["schemas"]["Bug"];
                "multipart/form-data": components["schemas"]["Bug"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Bug"];
                };
            };
        };
    };
    api_bugtracker_bug_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this bug. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_bugtracker_bug_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this bug. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedBug"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedBug"];
                "multipart/form-data": components["schemas"]["PatchedBug"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Bug"];
                };
            };
        };
    };
    api_contract_list: {
        parameters: {
            query?: {
                beneficiary?: number;
                /** @description Les valeurs multiples doivent être séparées par des virgules. */
                beneficiary__in?: number[];
                end_date__gt?: string;
                end_date__gte?: string;
                end_date__lt?: string;
                end_date__lte?: string;
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                referent?: number;
                /** @description Les valeurs multiples doivent être séparées par des virgules. */
                referent__in?: number[];
                /** @description A search term. */
                search?: string;
                start_date__gt?: string;
                start_date__gte?: string;
                start_date__lt?: string;
                start_date__lte?: string;
                /** @description * `waiting` - En attente d'EDL
                 *     * `pending` - En cours
                 *     * `over` - Clôturé
                 *     * `payed` - Payé */
                status?: PathsApiContractGetParametersQueryStatus;
                /** @description Les valeurs multiples doivent être séparées par des virgules. */
                status__in?: string[];
                vehicle?: number;
                /** @description Les valeurs multiples doivent être séparées par des virgules. */
                vehicle__in?: number[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedContractList"];
                };
            };
        };
    };
    api_contract_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MutationContract"];
                "application/x-www-form-urlencoded": components["schemas"]["MutationContract"];
                "multipart/form-data": components["schemas"]["MutationContract"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MutationContract"];
                };
            };
        };
    };
    api_contract_payment_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
            };
            header?: never;
            path: {
                contract_pk: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPaymentList"];
                };
            };
        };
    };
    api_contract_payment_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract_pk: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Payment"];
                "application/x-www-form-urlencoded": components["schemas"]["Payment"];
                "multipart/form-data": components["schemas"]["Payment"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
        };
    };
    api_contract_payment_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract_pk: number;
                /** @description A unique integer value identifying this payment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
        };
    };
    api_contract_payment_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract_pk: number;
                /** @description A unique integer value identifying this payment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Payment"];
                "application/x-www-form-urlencoded": components["schemas"]["Payment"];
                "multipart/form-data": components["schemas"]["Payment"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
        };
    };
    api_contract_payment_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract_pk: number;
                /** @description A unique integer value identifying this payment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_contract_payment_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract_pk: number;
                /** @description A unique integer value identifying this payment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPayment"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPayment"];
                "multipart/form-data": components["schemas"]["PatchedPayment"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
        };
    };
    api_contract_payment_get_participation_pdf_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract_pk: number;
                /** @description A unique integer value identifying this payment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
        };
    };
    api_contract_payment_summary_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract_pk: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContractPaymentSummary"];
                };
            };
        };
    };
    api_contract_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this contract. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contract"];
                };
            };
        };
    };
    api_contract_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this contract. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MutationContract"];
                "application/x-www-form-urlencoded": components["schemas"]["MutationContract"];
                "multipart/form-data": components["schemas"]["MutationContract"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MutationContract"];
                };
            };
        };
    };
    api_contract_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this contract. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_contract_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this contract. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedMutationContract"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedMutationContract"];
                "multipart/form-data": components["schemas"]["PatchedMutationContract"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MutationContract"];
                };
            };
        };
    };
    api_contract_archive_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this contract. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contract"];
                };
            };
        };
    };
    api_contract_archive_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this contract. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedContract"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedContract"];
                "multipart/form-data": components["schemas"]["PatchedContract"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contract"];
                };
            };
        };
    };
    api_contract_end_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this contract. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EndContract"];
                };
            };
        };
    };
    api_contract_end_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this contract. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedEndContract"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedEndContract"];
                "multipart/form-data": components["schemas"]["PatchedEndContract"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EndContract"];
                };
            };
        };
    };
    api_contract_get_bill_pdf_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this contract. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contract"];
                };
            };
        };
    };
    api_contract_get_contract_pdf_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this contract. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contract"];
                };
            };
        };
    };
    api_contract_unarchive_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this contract. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedContract"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedContract"];
                "multipart/form-data": components["schemas"]["PatchedContract"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contract"];
                };
            };
        };
    };
    api_contract_get_archived_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contract"];
                };
            };
        };
    };
    api_parking_list: {
        parameters: {
            query?: {
                actions?: number[];
                /** @description Les valeurs multiples doivent être séparées par des virgules. */
                actions__in?: number[];
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedParkingList"];
                };
            };
        };
    };
    api_parking_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Parking"];
                "application/x-www-form-urlencoded": components["schemas"]["Parking"];
                "multipart/form-data": components["schemas"]["Parking"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Parking"];
                };
            };
        };
    };
    api_parking_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this parking. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Parking"];
                };
            };
        };
    };
    api_parking_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this parking. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Parking"];
                "application/x-www-form-urlencoded": components["schemas"]["Parking"];
                "multipart/form-data": components["schemas"]["Parking"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Parking"];
                };
            };
        };
    };
    api_parking_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this parking. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_parking_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this parking. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedParking"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedParking"];
                "multipart/form-data": components["schemas"]["PatchedParking"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Parking"];
                };
            };
        };
    };
    api_referent_list: {
        parameters: {
            query?: {
                actions?: number[];
                /** @description Les valeurs multiples doivent être séparées par des virgules. */
                actions__in?: number[];
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserList"];
                };
            };
        };
    };
    api_referent_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
                "application/x-www-form-urlencoded": components["schemas"]["User"];
                "multipart/form-data": components["schemas"]["User"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    api_referent_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this utilisateur. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    api_referent_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this utilisateur. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
                "application/x-www-form-urlencoded": components["schemas"]["User"];
                "multipart/form-data": components["schemas"]["User"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    api_referent_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this utilisateur. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_referent_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this utilisateur. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUser"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedUser"];
                "multipart/form-data": components["schemas"]["PatchedUser"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    api_token_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenObtainPair"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenObtainPair"];
                "multipart/form-data": components["schemas"]["TokenObtainPair"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenObtainPair"];
                };
            };
        };
    };
    api_token_refresh_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenRefresh"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenRefresh"];
                "multipart/form-data": components["schemas"]["TokenRefresh"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenRefresh"];
                };
            };
        };
    };
    api_user_actions_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserAction"][];
                };
            };
        };
    };
    api_user_actions_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserActionUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["UserActionUpdate"];
                "multipart/form-data": components["schemas"]["UserActionUpdate"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserActionUpdate"];
                };
            };
        };
    };
    api_vehicle_list: {
        parameters: {
            query?: {
                contracts?: number[];
                /** @description Les valeurs multiples doivent être séparées par des virgules. */
                contracts__in?: number[];
                contracts__or?: number;
                fleet_id?: number;
                /** @description Les valeurs multiples doivent être séparées par des virgules. */
                fleet_id__in?: number[];
                /** @description * `essence` - Essence
                 *     * `diesel` - Diesel
                 *     * `electrique` - Electrique */
                fuel_type?: PathsApiVehicleGetParametersQueryFuel_type;
                /** @description Les valeurs multiples doivent être séparées par des virgules. */
                fuel_type__in?: string[];
                id?: number;
                /** @description Les valeurs multiples doivent être séparées par des virgules. */
                id__in?: number[];
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
                /** @description * `available` - Disponible
                 *     * `rented` - A dispo
                 *     * `maintenance` - En maintenance */
                status?: PathsApiVehicleGetParametersQueryStatus;
                /** @description Les valeurs multiples doivent être séparées par des virgules. */
                status__in?: string[];
                /** @description Status or
                 *
                 *     * `available` - Disponible
                 *     * `rented` - A dispo
                 *     * `maintenance` - En maintenance */
                status__or?: PathsApiVehicleGetParametersQueryStatus__or;
                /** @description * `manuelle` - Manuelle
                 *     * `automatique` - Automatique */
                transmission?: PathsApiVehicleGetParametersQueryTransmission;
                /** @description Les valeurs multiples doivent être séparées par des virgules. */
                transmission__in?: string[];
                /** @description * `voiture` - Voiture
                 *     * `scouter` - Scooter */
                type?: PathsApiVehicleGetParametersQueryType;
                /** @description Les valeurs multiples doivent être séparées par des virgules. */
                type__in?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedVehicleList"];
                };
            };
        };
    };
    api_vehicle_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MutationVehicle"];
                "application/x-www-form-urlencoded": components["schemas"]["MutationVehicle"];
                "multipart/form-data": components["schemas"]["MutationVehicle"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MutationVehicle"];
                };
            };
        };
    };
    api_vehicle_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this vehicle. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Vehicle"];
                };
            };
        };
    };
    api_vehicle_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this vehicle. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MutationVehicle"];
                "application/x-www-form-urlencoded": components["schemas"]["MutationVehicle"];
                "multipart/form-data": components["schemas"]["MutationVehicle"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MutationVehicle"];
                };
            };
        };
    };
    api_vehicle_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this vehicle. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_vehicle_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this vehicle. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedMutationVehicle"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedMutationVehicle"];
                "multipart/form-data": components["schemas"]["PatchedMutationVehicle"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MutationVehicle"];
                };
            };
        };
    };
    api_vehicle_action_transfer_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this vehicle. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VehicleActionTransfer"];
                "application/x-www-form-urlencoded": components["schemas"]["VehicleActionTransfer"];
                "multipart/form-data": components["schemas"]["VehicleActionTransfer"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VehicleActionTransfer"];
                };
            };
        };
    };
    api_vehicle_archive_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this vehicle. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Vehicle"];
                };
            };
        };
    };
    api_vehicle_archive_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this vehicle. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedVehicle"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedVehicle"];
                "multipart/form-data": components["schemas"]["PatchedVehicle"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Vehicle"];
                };
            };
        };
    };
    api_vehicle_unarchive_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this vehicle. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedVehicle"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedVehicle"];
                "multipart/form-data": components["schemas"]["PatchedVehicle"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Vehicle"];
                };
            };
        };
    };
    api_vehicle_get_all_ids_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShortVehicle"];
                };
            };
        };
    };
    api_vehicle_get_archived_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Vehicle"];
                };
            };
        };
    };
    api_whoami_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WhoAmI"][];
                };
            };
        };
    };
}
export enum PathsApiSchemaGetParametersQueryFormat {
    json = "json",
    yaml = "yaml"
}
export enum PathsApiSchemaGetParametersQueryLang {
    af = "af",
    ar = "ar",
    ar_dz = "ar-dz",
    ast = "ast",
    az = "az",
    be = "be",
    bg = "bg",
    bn = "bn",
    br = "br",
    bs = "bs",
    ca = "ca",
    ckb = "ckb",
    cs = "cs",
    cy = "cy",
    da = "da",
    de = "de",
    dsb = "dsb",
    el = "el",
    en = "en",
    en_au = "en-au",
    en_gb = "en-gb",
    eo = "eo",
    es = "es",
    es_ar = "es-ar",
    es_co = "es-co",
    es_mx = "es-mx",
    es_ni = "es-ni",
    es_ve = "es-ve",
    et = "et",
    eu = "eu",
    fa = "fa",
    fi = "fi",
    fr = "fr",
    fy = "fy",
    ga = "ga",
    gd = "gd",
    gl = "gl",
    he = "he",
    hi = "hi",
    hr = "hr",
    hsb = "hsb",
    hu = "hu",
    hy = "hy",
    ia = "ia",
    id = "id",
    ig = "ig",
    io = "io",
    is = "is",
    it = "it",
    ja = "ja",
    ka = "ka",
    kab = "kab",
    kk = "kk",
    km = "km",
    kn = "kn",
    ko = "ko",
    ky = "ky",
    lb = "lb",
    lt = "lt",
    lv = "lv",
    mk = "mk",
    ml = "ml",
    mn = "mn",
    mr = "mr",
    ms = "ms",
    my = "my",
    nb = "nb",
    ne = "ne",
    nl = "nl",
    nn = "nn",
    os = "os",
    pa = "pa",
    pl = "pl",
    pt = "pt",
    pt_br = "pt-br",
    ro = "ro",
    ru = "ru",
    sk = "sk",
    sl = "sl",
    sq = "sq",
    sr = "sr",
    sr_latn = "sr-latn",
    sv = "sv",
    sw = "sw",
    ta = "ta",
    te = "te",
    tg = "tg",
    th = "th",
    tk = "tk",
    tr = "tr",
    tt = "tt",
    udm = "udm",
    ug = "ug",
    uk = "uk",
    ur = "ur",
    uz = "uz",
    vi = "vi",
    zh_hans = "zh-hans",
    zh_hant = "zh-hant"
}
export enum PathsApiBugtrackerBugGetParametersQuerySeverity {
    critical = "critical",
    high = "high",
    low = "low",
    medium = "medium"
}
export enum PathsApiBugtrackerBugGetParametersQueryStatus {
    closed = "closed",
    open = "open",
    pending = "pending"
}
export enum PathsApiBugtrackerBugGetParametersQueryType {
    bug = "bug",
    feature = "feature",
    suggestion = "suggestion"
}
export enum PathsApiContractGetParametersQueryStatus {
    over = "over",
    payed = "payed",
    pending = "pending",
    waiting = "waiting"
}
export enum PathsApiVehicleGetParametersQueryFuel_type {
    diesel = "diesel",
    electrique = "electrique",
    essence = "essence"
}
export enum PathsApiVehicleGetParametersQueryStatus {
    available = "available",
    maintenance = "maintenance",
    rented = "rented"
}
export enum PathsApiVehicleGetParametersQueryStatus__or {
    available = "available",
    maintenance = "maintenance",
    rented = "rented"
}
export enum PathsApiVehicleGetParametersQueryTransmission {
    automatique = "automatique",
    manuelle = "manuelle"
}
export enum PathsApiVehicleGetParametersQueryType {
    scouter = "scouter",
    voiture = "voiture"
}
export enum BlankEnum {
     ""
}
export enum BugSeverityEnum {
    low = "low",
    medium = "medium",
    high = "high",
    critical = "critical"
}
export enum BugStatusEnum {
    open = "open",
    closed = "closed",
    pending = "pending"
}
export enum BugTypeEnum {
    bug = "bug",
    feature = "feature",
    suggestion = "suggestion"
}
export enum ContractStatusEnum {
    waiting = "waiting",
    pending = "pending",
    over = "over",
    payed = "payed"
}
export enum FuelTypeEnum {
    essence = "essence",
    diesel = "diesel",
    electrique = "electrique"
}
export enum PaymentModeEnum {
    cash = "cash",
    check = "check",
    card = "card"
}
export enum ReasonEnum {
    cdd = "cdd",
    cdi = "cdi",
    formation = "formation",
    interim = "interim",
    aided_contract = "aided_contract",
    job_seeking = "job_seeking",
    part_time = "part_time"
}
export enum TransmissionEnum {
    manuelle = "manuelle",
    automatique = "automatique"
}
export enum VehicleStatusEnum {
    available = "available",
    rented = "rented",
    maintenance = "maintenance"
}
export enum VehicleTypeEnum {
    voiture = "voiture",
    scouter = "scouter"
}
